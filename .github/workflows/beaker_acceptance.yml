name: Run Beaker acceptance tests on an OpenVox project

on:
  workflow_call:
    inputs:
      project-name:
        description: The OpenVox project to test.
        required: true
        type: string
      ref:
        description: |-
          The git ref of the project-name Beaker test suite to run.
        required: true
        type: string
      fork:
        description: |-
          The github fork of the project-name Beaker test suite to run.
        required: false
        type: string
        default: openvoxproject
      install-openvox:
        description: |-
          Whether or not to install any openvox packages on the
          virtual machines created for the tests.

          If true, then openvox-agent packages will be installed on
          all nodes listed in the vms input, and openvox-server and
          openvoxdb packages may be installed depending on the
          install-openvox-server and install-openvoxdb flags, and on
          whether the vms input has a node in the 'primary' role.

          If false, then no openvox packages will be installed,
          regardless of the install-openvox-server or
          install-openvoxdb flags.
        required: false
        type: boolean
        default: true
      openvox-collection:
        description: |-
          The OpenVox collection to install from.
        required: false
        type: string
        default: openvox8
      openvox-agent-version:
        description: |-
          The version of the openvox-agent package to install.
        required: false
        type: string
      openvox-agent-pre-release-build:
        description: |-
          Whether to test unreleased openvox-agent-version packages
          from the artifacts-url server, or released packages from the
          given openvox-collection.

          If this is true, openvox-agent-version must be a valid
          version, not latest, and openvox-collection is ignored. The
          workflow will download and install the matching
          openvox-agent package file from the artifacts-url server.

          If this is false, openvox-agent-version and
          openvox-collection must match, and the workflow will install
          the given openvox collection package and then let the system
          package manager install the latest or openvox-agent-version
          package from the collection repository.
        required: false
        type: boolean
        default: true
      install-openvox-server:
        description: |-
          If true, the openvox-server package will be installed on any
          node in vms with the role 'primary'.
        required: false
        type: string
      openvox-server-version:
        description: |-
          The version of the openvox-server package to install.
        required: false
        type: string
      openvox-server-pre-release-build:
        description: |-
          Whether to test unreleased openvox-server-version packages
          from the artifacts-url server, or released packages from the
          given openvox-collection.

          (See openvox-agent-pre-release-build)
        required: false
        type: boolean
        default: true
      install-openvoxdb:
        description: |-
          If true, the openvoxdb package will be installed on any node
          in vms with the role 'primary'.
        required: false
        type: string
      openvoxdb-version:
        description: |-
          The version of the openvoxdb package to install.
        required: false
        type: string
      openvoxdb-pre-release-build:
        description: |-
          Whether to test unreleased openvoxdb-version packages
          from the artifacts-url server, or released packages from the
          given openvox-collection.

          (See openvox-agent-pre-release-build)
        required: false
        type: boolean
        default: true
      install-openvoxdb-termini:
        description: |-
          In a production installation using openvoxdb, the
          openvoxdb-termini package is installed alongside
          openvox-server. Set this to false to install just
          openvox-server without the openvoxdb-termini.
        required: false
        type: boolean
        default: true
      artifacts-url:
        description: |-
          URL to the artifacts server. This is used to download
          pre-release packages for openvox-agent, openvox-server, and
          openvoxdb if their pre-release-build inputs are true.
        required: false
        type: string
        default: 'https://s3.osuosl.org/openvox-artifacts'
      ruby-version:
        description: |-
          The Ruby version to use for the project being tested.
          This is used to install Ruby and run Bundler when
          running the project's Beaker acceptance suite.
        required: false
        type: string
        default: '3.3'
      acceptance-working-dir:
        description: |-
          The working directory for the acceptance tests, relative to
          project root.
        required: false
        type: string
      acceptance-pre-suite:
        description: |-
          JSON array of Beaker pre-suite files to run.
          These should be relative to the acceptance-working-dir, or
          absolute paths.
          If not provided, no pre-suite will be run.
        required: false
        type: string
      acceptance-tests:
        description: |-
          JSON array of Beaker test files to run.
          These should be relative to the acceptance-working-dir, or
          absolute paths.
          If not provided, no tests will be run.
        required: false
        type: string
      beaker-options:
        description: |-
          A JSON hash of Beaker options to be included in the
          .beaker.yml generated for the test suite run.

          This is useful for setting details like 'helper', 'load_path'
          and 'options_file', among others.
        required: false
        type: string
      os:
        description: |-
          JSON array of operating systems to run the tests on.
          Each entry is an array of minimally [os, os-version],
          with os-arch and image_version as optional third and fourth
          elements.

          The elements are passed to jpartlow/nested_vms os,
          os-version, os-arch and image_version inputs.

          Ex:
            [
              ["almalinux", "8"],
              ["debian", "12", "amd64", "daily-latest"]
            ]

          Generally the default array can be used, and
          additional operating systems can be specified with the
          os-add parameter.
        required: false
        type: string
      os-add:
        description: |-
          Additional operating systems to run the tests on.
          This is a JSON array of the same format as the os input.
          If provided, these will be added to the end of the os matrix.
        required: false
        type: string
      vms:
        description: |-
          JSON array of virtual machine descriptions to create for the
          tests. This is passed to the jpartlow/nested_vms action and
          is in a format handled by jpartlow/kvm_automation_tooling's
          standup_cluster plan.

          Each entry is an object with the following properties:
          - role: The role of the VM (e.g., "agent").
          - count: The number of VMs to create for this role.
          - cpus: The number of CPUs to allocate to each VM.
          - mem_mb: The amount of memory (in MB) to allocate to each VM.
          - disk_gb: The amount of disk space (in GB) to allocate to
            each VM.
          - cpu_mode: The CPU mode to use for the VM (e.g.,
            "host-model"). (Necessary for el-9 which expects at least
            x86_64-2 arch, and depends on the runner's architecture
            being sufficient.)
        required: false
        type: string

env:
  # Suppress warnings about Bolt gem versus package use.
  BOLT_GEM: true

jobs:
  set-project-defaults:
    runs-on: ubuntu-24.04
    outputs:
      install-openvox-server: ${{ steps.set-defaults.outputs.install_openvox_server }}
      install-openvoxdb: ${{ steps.set-defaults.outputs.install_openvoxdb }}
      acceptance-working-dir: ${{ steps.set-defaults.outputs.acceptance_working_dir }}
      acceptance-pre-suite: ${{ steps.set-defaults.outputs.acceptance_pre_suite }}
      acceptance-tests: ${{ steps.set-defaults.outputs.acceptance_tests }}
      beaker-options: ${{ steps.set-defaults.outputs.beaker_options }}
      os: ${{ steps.set-defaults.outputs.os }}
      os-add: ${{ steps.set-defaults.outputs.os_add }}
      vms: ${{ steps.set-defaults.outputs.vms }}
    steps:
      - id: set-defaults
        env:
          PROJECT_NAME: ${{ inputs.project-name }}
          INSTALL_OPENVOX_SERVER: ${{ inputs.install-openvox-server }}
          INSTALL_OPENVOX_DB: ${{ inputs.install-openvoxdb }}
          ACCEPTANCE_WORKING_DIR: ${{ inputs.acceptance-working-dir }}
          ACCEPTANCE_PRE_SUITE: ${{ inputs.acceptance-pre-suite }}
          ACCEPTANCE_TESTS: ${{ inputs.acceptance-tests }}
          BEAKER_OPTIONS: ${{ inputs.beaker-options }}
          OS: ${{ inputs.os }}
          OS_ADD: ${{ inputs.os-add }}
          VMS: ${{ inputs.vms }}
          DEFAULT_OS: |-
            [
              ["almalinux", "8"],
              ["almalinux", "9"],
              ["debian", "11"],
              ["debian", "12"],
              ["rocky", "8"],
              ["rocky", "9"],
              ["ubuntu", "22.04"],
              ["ubuntu", "24.04"]
            ]
          PROJECT_DEFAULTS: |-
            {
              "openvox": {
                "install-openvox-server": true,
                "install-openvoxdb": false,
                "acceptance-working-dir": "acceptance",
                "acceptance-pre-suite": [
                  "pre-suite"
                ],
                "acceptance-tests": [
                  "tests"
                ],
                "beaker-options": {
                  "helper":       "lib/helper.rb",
                  "options_file": "config/aio/options.rb"
                },
                "os-add": [],
                "vms": [
                  {
                    "role": "primary",
                    "count": 1,
                    "cpus": 4,
                    "mem_mb": 8192,
                    "cpu_mode": "host-model"
                  }
                ]
              },
              "openvox-agent": {
                "install-openvox-server": false,
                "install-openvoxdb": false,
                "acceptance-working-dir": "acceptance",
                "acceptance-pre-suite": [
                  "pre-suite/configure_type_defaults.rb"
                ],
                "acceptance-tests": [
                  "tests"
                ],
                "beaker-options": {
                  "helper":       "lib/helper.rb"
                },
                "os-add": [
                  ["debian", "13", "amd64", "daily-latest"]
                ],
                "vms": [
                  {
                    "role": "agent",
                    "count": 1,
                    "cpus": 2,
                    "mem_mb": 4096,
                    "cpu_mode": "host-model"
                  }
                ]
              },
              "openvox-server": {
                "install-openvox-server": true,
                "install-openvoxdb": true,
                "acceptance-working-dir": "./",
                "acceptance-pre-suite": [
                  "acceptance/suites/pre_suite/openvox/configure_type_defaults.rb",
                  "acceptance/suites/pre_suite/foss/00_setup_environment.rb",
                  "acceptance/suites/pre_suite/foss/070_InstallCACerts.rb",
                  "acceptance/suites/pre_suite/foss/10_update_ca_certs.rb",
                  "acceptance/suites/pre_suite/foss/15_prep_locales.rb",
                  "acceptance/suites/pre_suite/foss/71_smoke_test_puppetserver.rb",
                  "acceptance/suites/pre_suite/foss/80_configure_puppet.rb",
                  "acceptance/suites/pre_suite/foss/85_configure_sut.rb",
                  "acceptance/suites/pre_suite/foss/90_validate_sign_cert.rb",
                  "acceptance/suites/pre_suite/foss/95_install_pdb.rb",
                  "acceptance/suites/pre_suite/foss/99_collect_data.rb"
                ],
                "acceptance-tests": [
                  "acceptance/suites/tests"
                ],
                "beaker-options": {
                  "helper":       "acceptance/lib/helper.rb",
                  "load_path":    "acceptance/lib",
                  "options_file": "acceptance/config/beaker/options.rb"
                },
                "os-add": [],
                "vms": [
                  {
                    "role": "primary",
                    "count": 1,
                    "cpus": 4,
                    "mem_mb": 8192,
                    "cpu_mode": "host-model"
                  },
                  {
                    "role": "agent",
                    "count": 1,
                    "cpus": 2,
                    "mem_mb": 2048,
                    "cpu_mode": "host-model"
                  }
                ]
              },
              "openvoxdb": {
                "install-openvox-server": true,
                "install-openvoxdb": true,
                "acceptance-working-dir": "./",
                "acceptance-pre-suite": [
                  "acceptance/setup/openvox/configure_type_defaults.rb",
                  "acceptance/setup/pre_suite/00_setup_test_env.rb",
                  "acceptance/setup/pre_suite/10_setup_proxies.rb",
                  "acceptance/setup/pre_suite/15_prep_locales.rb",
                  "acceptance/setup/pre_suite/20_install_puppet.rb",
                  "acceptance/setup/pre_suite/30_generate_ssl_certs.rb",
                  "acceptance/setup/pre_suite/40_install_deps.rb",
                  "acceptance/setup/pre_suite/50_install_modules.rb",
                  "acceptance/setup/pre_suite/75_clean_out_puppet5_repos.rb",
                  "acceptance/setup/pre_suite/80_add_dev_repo.rb",
                  "acceptance/setup/openvox/configure_openvoxdb.rb"
                ],
                "acceptance-tests": [
                  "acceptance/tests"
                ],
                "beaker-options": {
                  "helper":       "acceptance/helper.rb",
                  "options_file": "acceptance/options/openvox.rb"
                },
                "os-add": [],
                "vms": [
                  {
                    "role": "primary",
                    "count": 1,
                    "cpus": 4,
                    "mem_mb": 8192,
                    "cpu_mode": "host-model"
                  },
                  {
                    "role": "agent",
                    "count": 1,
                    "cpus": 2,
                    "mem_mb": 2048,
                    "cpu_mode": "host-model"
                  }
                ]
              }
            }
        run: |-
          # Pick out the defaults for the project being tested.
          jq ".\"${PROJECT_NAME}\" | .os = ${DEFAULT_OS}" <<< "${PROJECT_DEFAULTS}" > project_defaults.json
          cat project_defaults.json

          # Provide project defaults where inputs are not set.
          parameters=(
            "install-openvox-server"
            "install-openvoxdb"
            "acceptance-working-dir"
            "acceptance-pre-suite"
            "acceptance-tests"
            "beaker-options"
            "os"
            "os-add"
            "vms"
          )
          for param in "${parameters[@]}"; do
            output_name=${param//-/_}
            env_input_name=${output_name^^}
            default=$(jq -rMc ".\"${param}\"" project_defaults.json)
            value=${!env_input_name:-$default}
            # Since the value of env_input_name could be a mutli-line
            # string from inputs, we'll use jq again to ensure we
            # produce something output can handle.
            echo "${output_name}=$(jq -rMc <<<"${value}")" >> $GITHUB_OUTPUT
          done

  set-matrix:
    needs: set-project-defaults
    runs-on: ubuntu-24.04
    outputs:
      os-matrix: ${{ steps.set-matrix.outputs.os_matrix }}
    steps:
      - id: set-matrix
        env:
          OS: ${{ needs.set-project-defaults.outputs.os }}
          OS_ADD: ${{ needs.set-project-defaults.outputs.os-add }}
        run: |-
          cat > matrix_inputs.json <<EOF
          [
            ${OS},
            ${OS_ADD}
          ]
          EOF
          cat matrix_inputs.json
          echo "os_matrix=$(jq --monochrome-output --compact-output 'add | unique' matrix_inputs.json)" >> $GITHUB_OUTPUT

  acceptance:
    name: Acceptance Tests
    needs: [set-project-defaults, set-matrix]
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.set-matrix.outputs.os-matrix) }}
    env:
      ACCEPTANCE_WORKING_DIR: |-
        ${{ format('{0}/{1}/{2}',
                   github.workspace,
                   inputs.project-name,
                   needs.set-project-defaults.outputs.acceptance-working-dir) }}
    steps:
      - uses: actions/checkout@v5
        with:
          # Ensure that we checkout the project we want to test rather
          # than the repository that this workflow is being called
          # from.
          repository: ${{ format('{0}/{1}', inputs.fork, inputs.project-name) }}
          ref: ${{ inputs.ref }}
          path: ${{ inputs.project-name }}

      - id: vm-cluster
        uses: jpartlow/nested_vms@v1
        with:
          os: ${{ matrix.os[0] }}
          os-version: ${{ matrix.os[1] }}
          os-arch: ${{ matrix.os[2] || 'x86_64' }}
          image_version: ${{ matrix.os[3] }}
          host-root-access: true
          install-openvox: false
          # Note: the cpu_mode is set to host-model for the sake of
          # el-9 which expects at least x86_64-2 arch. This depends on
          # the runner's architecture being sufficient, and there is
          # probably a better way to get this set on the libvirt
          # domain instead.
          vms: ${{ needs.set-project-defaults.outputs.vms }}

      - name: Write Install OpenVox Params
        working-directory: kvm_automation_tooling
        if: ${{ inputs.install-openvox == true }}
        env:
          OPENVOX_ARTIFACTS_URL: |-
            ${{ inputs.artifacts-url }}
          OPENVOX_COLLECTION: ${{ inputs.collection }}
          OPENVOX_AGENT_VERSION: |-
            ${{ ((inputs.openvox-agent-version == '') && 'latest') ||
                 inputs.openvox-agent-version }}
          OPENVOX_AGENT_RELEASED: |-
            ${{ !inputs.openvox-agent-pre-release-build }}
          OPENVOX_SERVER_TARGETS: |-
            ${{ ((fromJson(needs.set-project-defaults.outputs.install-openvox-server) == true) && '"primary"') ||
                  '[]' }}
          OPENVOX_SERVER_VERSION: |-
            ${{ ((inputs.openvox-server-version == '') && 'latest') ||
                 inputs.openvox-server-version }}
          OPENVOX_SERVER_RELEASED: |-
            ${{ !inputs.openvox-server-pre-release-build }}
          OPENVOX_DB_TARGETS: |-
            ${{ ((fromJson(needs.set-project-defaults.outputs.install-openvoxdb) == true) && '"primary"') ||
                 '[]' }}
          OPENVOX_DB_VERSION: |-
            ${{ ((inputs.openvoxdb-version == '') && 'latest') ||
                 inputs.openvoxdb-version }}
          OPENVOX_DB_RELEASED: |-
            ${{ !inputs.openvoxdb-pre-release-build }}
          INSTALL_TERMINI: ${{ inputs.install-openvoxdb-termini }}
        run: |-
          cat > install_openvox_params.json <<EOF
          {
            "openvox_agent_targets": "all",
            "openvox_server_targets": ${OPENVOX_SERVER_TARGETS},
            "openvox_db_targets": ${OPENVOX_DB_TARGETS},
            "openvox_agent_params": {
              "openvox_collection": "${OPENVOX_COLLECTION}",
              "openvox_version": "${OPENVOX_AGENT_VERSION}",
              "openvox_released": ${OPENVOX_AGENT_RELEASED}
            },
            "openvox_server_params": {
              "openvox_collection": "${OPENVOX_COLLECTION}",
              "openvox_version": "${OPENVOX_SERVER_VERSION}",
              "openvox_released": ${OPENVOX_SERVER_RELEASED}
            },
            "openvox_db_params": {
              "openvox_collection": "${OPENVOX_COLLECTION}",
              "openvox_version": "${OPENVOX_DB_VERSION}",
              "openvox_released": ${OPENVOX_DB_RELEASED}
            },
            "install_defaults": {
              "openvox_version": "latest",
              "openvox_collection": "${OPENVOX_COLLECTION}",
              "openvox_released": true,
              "openvox_artifacts_url": "${OPENVOX_ARTIFACTS_URL}"
            },
            "install_termini": ${INSTALL_TERMINI}
          }
          EOF
          cat install_openvox_params.json

      - name: Install OpenVox Components
        working-directory: kvm_automation_tooling
        if: ${{ inputs.install-openvox == true }}
        env:
          # Generated by the nested_vms action.
          INVENTORY: terraform/instances/inventory.test.yaml
        run: |-
          bundle exec bolt plan run \
            kvm_automation_tooling::install_openvox \
            --inventory "${INVENTORY}" \
            --params @install_openvox_params.json

      - name: Construct hosts.yaml
        working-directory: kvm_automation_tooling
        env:
          HOSTS_YAML: ${{ env.ACCEPTANCE_WORKING_DIR }}/hosts.yaml
          # Generated by the nested_vms action.
          INVENTORY: terraform/instances/inventory.test.yaml
        run: |-
          bundle exec bolt plan run \
            kvm_automation_tooling::dev::generate_beaker_hosts_file \
            --inventory "${INVENTORY}" \
            hosts_yaml="${HOSTS_YAML}"
          cat "${HOSTS_YAML}"

      - name: Install Ruby and Run Bundler for Acceptance Tests
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ inputs.ruby-version }}
          working-directory: ${{ env.ACCEPTANCE_WORKING_DIR }}
          bundler-cache: true

      - name: Write .beaker.yml
        working-directory: ${{ env.ACCEPTANCE_WORKING_DIR }}
        # for pipefail
        shell: bash
        env:
          # Generated by the nested_vms action.
          SSH_KEY: ~/.ssh/ssh-id-test
          PRE_SUITE_ARRAY: |-
            ${{ needs.set-project-defaults.outputs.acceptance-pre-suite || '[]' }}
          TESTS_ARRAY: |-
            ${{ needs.set-project-defaults.outputs.acceptance-tests || '[]' }}
          BEAKER_OPTIONS: |-
            ${{ needs.set-project-defaults.outputs.beaker-options || '{}' }}
        run: |-
          cat > beaker.yml.inputs <<EOF
          [
            {
              "ssh": {
                "keys": [
                  "${SSH_KEY}"
                ]
              },
              "xml":                       true,
              "timesync":                  false,
              "repo_proxy":                true,
              "add_el_extras":             false,
              "master-start-curl-retries": 30,
              "log_level":                 "debug",
              "preserve_hosts":            "always",
              "type":                      "aio",
              "pre_suite": ${PRE_SUITE_ARRAY},
              "tests": ${TESTS_ARRAY}
            },
            ${BEAKER_OPTIONS}
          ]
          EOF
          cat beaker.yml.inputs
          jq 'add' beaker.yml.inputs | yq -P > .beaker.yml
          cat .beaker.yml

      - name: Run Beaker
        working-directory: ${{ env.ACCEPTANCE_WORKING_DIR }}
        run: |-
          # Options feed in from .beaker.yml generated above
          bundle exec beaker init --hosts hosts.yaml
          # The provision step is still needed here, see notes in the
          # kvm_automation_tooling/templates/beaker-hosts.yaml.epp
          # template...
          bundle exec beaker provision
          bundle exec beaker exec
